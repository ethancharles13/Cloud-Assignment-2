apiVersion: v1
kind: Namespace
metadata:
  name: assignment2
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongo-pvc
  namespace: assignment2
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo
  namespace: assignment2
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongo
  template:
    metadata:
      labels:
        app: mongo
    spec:
      containers:
        - name: mongo
          image: mongo:6
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 27017
          volumeMounts:
            - name: mongo-storage
              mountPath: /data/db
          readinessProbe:
            tcpSocket:
              port: 27017
            initialDelaySeconds: 5
            periodSeconds: 5
          livenessProbe:
            tcpSocket:
              port: 27017
            initialDelaySeconds: 20
            periodSeconds: 10
      volumes:
        - name: mongo-storage
          persistentVolumeClaim:
            claimName: mongo-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: mongo
  namespace: assignment2
spec:
  selector:
    app: mongo
  ports:
    - name: mongo
      port: 27017
      targetPort: 27017
  type: ClusterIP
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: flask-config
  namespace: assignment2
data:
  PORT: "5000"
  MONGO_HOST: "mongo"
  MONGO_PORT: "27017"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flask-app
  namespace: assignment2
spec:
  replicas: 3
  selector:
    matchLabels:
      app: flask-app
  template:
    metadata:
      labels:
        app: flask-app
    spec:
      containers:
        - name: flask-app
          image: ethanbell90/computing_assignment2_image:firstTag
          imagePullPolicy: IfNotPresent
          envFrom:
            - configMapRef:
                name: flask-config
          env:
            - name: PYTHONUNBUFFERED
              value: "1"
          ports:
            - containerPort: 5000
          # Run Flask binding to 0.0.0.0 so it's accessible via Service
          command: ["sh", "-c"]
          args:
            - python -c "import os, app as m; m.app.run(host='0.0.0.0', port=int(os.environ.get('PORT','5000')), debug=False)"
          readinessProbe:
            tcpSocket:
              port: 5000
            initialDelaySeconds: 15
            periodSeconds: 5
            timeoutSeconds: 2
            failureThreshold: 6
          livenessProbe:
            tcpSocket:
              port: 5000
            initialDelaySeconds: 45
            periodSeconds: 10
            timeoutSeconds: 2
            failureThreshold: 3
          resources:
            requests:
              cpu: "100m"
              memory: "128Mi"
            limits:
              cpu: "500m"
              memory: "512Mi"
---
apiVersion: v1
kind: Service
metadata:
  name: flask-app
  namespace: assignment2
spec:
  selector:
    app: flask-app
  ports:
    - name: http
      port: 5000
      targetPort: 5000
  type: ClusterIP